}
else if(m_num == 6)
{
m_num <- 10
}
else
{
m_num <- 20
}
}
n_num <- n_num + 250
}
hotel.train$country = as.numeric(hotel.train$country)
hotel.train$agent = as.numeric(hotel.train$agent)
hotel.test$country = as.numeric(hotel.test$country)
hotel.test$agent = as.numeric(hotel.test$agent)
n_num <- 250
m_num <- 4
while ({n_num<=750})
{
while (m_num<=10)
{
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = n_num,     mtry = m_num, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
if(m_num==4)
{
m_num <-6
}
else if(m_num == 6)
{
m_num <- 10
}
else
{
m_num <- 20
}
}
n_num <- n_num + 250
}
hotel.train$country = as.numeric(hotel.train$country)
hotel.train$agent = as.numeric(hotel.train$agent)
hotel.test$country = as.numeric(hotel.test$country)
hotel.test$agent = as.numeric(hotel.test$agent)
# 250,4
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 250,    mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 500,4
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 500,    mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 750,4
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 750,    mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 250,6
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 250,    mtry = 6, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 500,6
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 500,    mtry = 6, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 750,6
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 750,    mtry = 6, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 250,10
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 250,    mtry = 10, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 500,10
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 500,    mtry = 10, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 750,10
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 750,    mtry = 10, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 500,4 is the best!!!!!!!!!!!!!!!!!!!!!!!!
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 500,    mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.38%, Sensitivity of 0.9048, Specificity of 0.7703, and Balanced Accuracy of 0.8376")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.38%, Sensitivity of 0.9048, Specificity of 0.7703, and Balanced Accuracy of 0.8376")
summary(rf.predict)
summary(rf.predict)
summary(rf.predict$err.rate)
hotel.train$country = as.numeric(hotel.train$country)
hotel.train$agent = as.numeric(hotel.train$agent)
hotel.test$country = as.numeric(hotel.test$country)
hotel.test$agent = as.numeric(hotel.test$agent)
model.rf <- randomForest(theFormula, data=trainset, mtry=4, ntree=750, importance=TRUE, do.trace=250)
hotel.train$country = as.numeric(hotel.train$country)
hotel.train$agent = as.numeric(hotel.train$agent)
hotel.test$country = as.numeric(hotel.test$country)
hotel.test$agent = as.numeric(hotel.test$agent)
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=4, ntree=750, importance=TRUE, do.trace=250)
library(dplyr)
library(plyr)
library(rpart)
library(caret)
library(rpart.plot)
library(ROCR)
library(randomForest)
hotel.df <- read.csv("hotel_bookings.csv", sep=",", header=T)
hotel.df$is_canceled <- as.factor(hotel.df$is_canceled)
cat("Resort hotel frequency:", sum(hotel.df$hotel=="Resort Hotel"),"\nCity hotel frequency:", sum(hotel.df$hotel=="City Hotel"))
cat("Number of guests who canceled reservation:",sum(hotel.df$is_canceled==1) ,"\nNumber of guests did not cancel the reservation:",sum(hotel.df$is_canceled==0))
cust.type.df <- count(hotel.df,"customer_type")
cat("Customer type with the most reservations is Transient with", cust.type.df[which.max(cust.type.df$freq),2],"reservations")
var0 <- hotel.df[which.max(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var0),"customers required the most number of parking spaces(" ,var0,")")
var1 <- hotel.df[which.min(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var1),"customers required the least number of parking spaces(" ,var1,")")
perc_good <- sum(as.character(hotel.df$reserved_room_type)==as.character(hotel.df$assigned_room_type))/119390*100
cat(perc_good,"% of the people who expressed a room preference during reservation got the room during check-in.")
hist.hotel.info.h1 <- filter(hotel.df, hotel == "City Hotel")
hist.hotel.info.h2 <- filter(hotel.df, hotel == "Resort Hotel"& country!= "NULL")
hist.hotel.table.h1 <- table(hist.hotel.info.h1$country)
hist.hotel.table.h2 <- table(hist.hotel.info.h2$country)
barplot(tail(sort(hist.hotel.table.h1),n=10), main = "Top 10 Origins for Resort Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
barplot(tail(sort(hist.hotel.table.h2),n=10),main = "Top 10 Origins for City Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
#a.)
set.seed(1122)
index <- sample(1:nrow(hotel.df), size=0.1*nrow(hotel.df))
hotel.test <- hotel.df[index, ]
hotel.train <- hotel.df[-index, ]
hotel.model <- rpart(is_canceled ~ deposit_type + lead_time +country + total_of_special_requests + required_car_parking_spaces + agent , method="class", data=hotel.train)
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", main="Hotel Cancelation Model")
print("The varibibles I chose were deposit_type, lead_time, country, total_of_special_requests, booking_changes, market_segment, previous_cancellations, and required_car_parking_spaces")
hotel.fit <- predict(hotel.model, hotel.test, type = "class")
confusionMatrix(hotel.fit,hotel.test$is_canceled)
print("A20393813, 0.804, 0.196, 0.7833, 0.6976, 0.8689")
pruned.rocr <- predict(hotel.model, newdata=hotel.test, type="prob")[,2]
f.pred <- prediction(pruned.rocr, hotel.test$is_canceled)
plot(performance(f.pred, "tpr", "fpr"), colorize=T, lwd=3)
abline(0,1)
auc.pruned <- performance(f.pred, measure = "auc")
cat(paste("The area under curve (AUC) for the full tree is ",
round(auc.pruned@y.values[[1]], 3)))
printcp(hotel.model)
plotcp(hotel.model)
hotel.train$country = as.numeric(hotel.train$country)
hotel.train$agent = as.numeric(hotel.train$agent)
hotel.test$country = as.numeric(hotel.test$country)
hotel.test$agent = as.numeric(hotel.test$agent)
model.rf.mtry4 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=4, ntree=750, importance=TRUE, do.trace=250)
model.rf.mtry6 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=6, ntree=750, importance=TRUE, do.trace=250)
model.rf.mtry10 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=10, ntree=750, importance=TRUE, do.trace=250)
# 500,4 is the best!!!!!!!!!!!!!!!!!!!!!!!!
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 500,    mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.38%, Sensitivity of 0.9048, Specificity of 0.7703, and Balanced Accuracy of 0.8376")
perc_good <- sum(as.character(hotel.df$reserved_room_type)==as.character(hotel.df$assigned_room_type))/119390*100
cat(perc_good,"% of the people who expressed a room preference during reservation got the room during check-in.")
hotel.df$same_room <- filter(hotel.df,as.character(hotel.df$reserved_room_type)==as.character(hotel.df$assigned_room_type))
hotel.df$same_room <- as.character(hotel.df$reserved_room_type)== as.character(hotel.df$assigned_room_type)
#a.)
set.seed(1122)
index <- sample(1:nrow(hotel.df), size=0.1*nrow(hotel.df))
hotel.test <- hotel.df[index, ]
hotel.train <- hotel.df[-index, ]
hotel.model <- rpart(is_canceled ~ deposit_type + lead_time +country + total_of_special_requests + required_car_parking_spaces + agent +same_room , method="class", data=hotel.train)
library(dplyr)
library(plyr)
library(rpart)
library(caret)
library(rpart.plot)
library(ROCR)
library(randomForest)
library(dplyr)
library(plyr)
library(rpart)
library(caret)
library(rpart.plot)
library(ROCR)
library(randomForest)
hotel.df <- read.csv("hotel_bookings.csv", sep=",", header=T)
hotel.df$is_canceled <- as.factor(hotel.df$is_canceled)
hotel.df$same_room <- as.character(hotel.df$reserved_room_type)== as.character(hotel.df$assigned_room_type)
cat("Resort hotel frequency:", sum(hotel.df$hotel=="Resort Hotel"),"\nCity hotel frequency:", sum(hotel.df$hotel=="City Hotel"))
cat("Number of guests who canceled reservation:",sum(hotel.df$is_canceled==1) ,"\nNumber of guests did not cancel the reservation:",sum(hotel.df$is_canceled==0))
cust.type.df <- count(hotel.df,"customer_type")
cat("Customer type with the most reservations is Transient with", cust.type.df[which.max(cust.type.df$freq),2],"reservations")
var0 <- hotel.df[which.max(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var0),"customers required the most number of parking spaces(" ,var0,")")
var1 <- hotel.df[which.min(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var1),"customers required the least number of parking spaces(" ,var1,")")
perc_good <- sum(as.character(hotel.df$reserved_room_type)==as.character(hotel.df$assigned_room_type))/119390*100
cat(perc_good,"% of the people who expressed a room preference during reservation got the room during check-in.")
hist.hotel.info.h1 <- filter(hotel.df, hotel == "City Hotel")
hist.hotel.info.h2 <- filter(hotel.df, hotel == "Resort Hotel"& country!= "NULL")
hist.hotel.table.h1 <- table(hist.hotel.info.h1$country)
hist.hotel.table.h2 <- table(hist.hotel.info.h2$country)
barplot(tail(sort(hist.hotel.table.h1),n=10), main = "Top 10 Origins for Resort Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
barplot(tail(sort(hist.hotel.table.h2),n=10),main = "Top 10 Origins for City Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
#a.)
set.seed(1122)
index <- sample(1:nrow(hotel.df), size=0.1*nrow(hotel.df))
hotel.test <- hotel.df[index, ]
hotel.train <- hotel.df[-index, ]
hotel.model <- rpart(is_canceled ~ deposit_type + lead_time +country + total_of_special_requests + required_car_parking_spaces + agent +same_room , method="class", data=hotel.train)
library(dplyr)
library(plyr)
library(rpart)
library(caret)
library(rpart.plot)
library(ROCR)
library(randomForest)
hotel.df <- read.csv("hotel_bookings.csv", sep=",", header=T)
hotel.df$is_canceled <- as.factor(hotel.df$is_canceled)
hotel.df$same_room <- as.character(hotel.df$reserved_room_type)== as.character(hotel.df$assigned_room_type)
cat("Resort hotel frequency:", sum(hotel.df$hotel=="Resort Hotel"),"\nCity hotel frequency:", sum(hotel.df$hotel=="City Hotel"))
cat("Number of guests who canceled reservation:",sum(hotel.df$is_canceled==1) ,"\nNumber of guests did not cancel the reservation:",sum(hotel.df$is_canceled==0))
cust.type.df <- count(hotel.df,"customer_type")
cat("Customer type with the most reservations is Transient with", cust.type.df[which.max(cust.type.df$freq),2],"reservations")
var0 <- hotel.df[which.max(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var0),"customers required the most number of parking spaces(" ,var0,")")
var1 <- hotel.df[which.min(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var1),"customers required the least number of parking spaces(" ,var1,")")
perc_good <- sum(as.character(hotel.df$reserved_room_type)==as.character(hotel.df$assigned_room_type))/119390*100
cat(perc_good,"% of the people who expressed a room preference during reservation got the room during check-in.")
hist.hotel.info.h1 <- filter(hotel.df, hotel == "City Hotel")
hist.hotel.info.h2 <- filter(hotel.df, hotel == "Resort Hotel"& country!= "NULL")
hist.hotel.table.h1 <- table(hist.hotel.info.h1$country)
hist.hotel.table.h2 <- table(hist.hotel.info.h2$country)
barplot(tail(sort(hist.hotel.table.h1),n=10), main = "Top 10 Origins for Resort Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
barplot(tail(sort(hist.hotel.table.h2),n=10),main = "Top 10 Origins for City Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
#a.)
set.seed(1122)
index <- sample(1:nrow(hotel.df), size=0.1*nrow(hotel.df))
hotel.test <- hotel.df[index, ]
hotel.train <- hotel.df[-index, ]
hotel.model <- rpart(is_canceled ~ deposit_type + lead_time +country + total_of_special_requests + required_car_parking_spaces + agent +same_room , method="class", data=hotel.train)
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", main="Hotel Cancelation Model")
print("The varibibles I chose were deposit_type, lead_time, country, total_of_special_requests, booking_changes, market_segment, previous_cancellations, and required_car_parking_spaces")
hotel.fit <- predict(hotel.model, hotel.test, type = "class")
confusionMatrix(hotel.fit,hotel.test$is_canceled)
print("A20393813, 0.804, 0.196, 0.7833, 0.6976, 0.8689")
pruned.rocr <- predict(hotel.model, newdata=hotel.test, type="prob")[,2]
f.pred <- prediction(pruned.rocr, hotel.test$is_canceled)
plot(performance(f.pred, "tpr", "fpr"), colorize=T, lwd=3)
abline(0,1)
auc.pruned <- performance(f.pred, measure = "auc")
cat(paste("The area under curve (AUC) for the full tree is ",
round(auc.pruned@y.values[[1]], 3)))
printcp(hotel.model)
plotcp(hotel.model)
auc.pruned <- performance(f.pred, measure = "auc")
cat(paste("The area under curve (AUC) for the full tree is ",
round(auc.pruned@y.values[[1]], 3)))
summary(hotel.model)
printcp(hotel.model)
plotcp(hotel.model)
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= 4, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= 2, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= 1, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .5, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .3, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .2, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= 32, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .3, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=TRUE, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=TRUE, margin = 0.2, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=TRUE, Margin = 0.2, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=TRUE, Margin = 0.3, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=TRUE, Margin = 0.4, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=TRUE, Margin = 0.5, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=TRUE, Margin = 1, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =FALSE, ycompress=TRUE, Margin = 1, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =FALSE, ycompress=FALSE, Margin = 1, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =FALSE, ycompress=FALSE, Margin = 2, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= 1,compress =FALSE, ycompress=FALSE, Margin = 2, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=FALSE, Margin = 2, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .15,compress =TRUE, ycompress=FALSE, Margin = 2, main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .15,compress =TRUE, ycompress=FALSE,  main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .15,compress =TRUE, ycompress=TRUE,  main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .3,compress =TRUE, ycompress=TRUE,  main="Hotel Cancelation Model")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=TRUE,  main="Hotel Cancelation Model")
library(dplyr)
library(plyr)
library(rpart)
library(caret)
library(rpart.plot)
library(ROCR)
library(randomForest)
hotel.df <- read.csv("hotel_bookings.csv", sep=",", header=T)
hotel.df$is_canceled <- as.factor(hotel.df$is_canceled)
hotel.df$same_room <- as.character(hotel.df$reserved_room_type)== as.character(hotel.df$assigned_room_type)
cat("Resort hotel frequency:", sum(hotel.df$hotel=="Resort Hotel"),"\nCity hotel frequency:", sum(hotel.df$hotel=="City Hotel"))
cat("Number of guests who canceled reservation:",sum(hotel.df$is_canceled==1) ,"\nNumber of guests did not cancel the reservation:",sum(hotel.df$is_canceled==0))
cust.type.df <- count(hotel.df,"customer_type")
cat("Customer type with the most reservations is Transient with", cust.type.df[which.max(cust.type.df$freq),2],"reservations")
var0 <- hotel.df[which.max(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var0),"customers required the most number of parking spaces(" ,var0,")")
var1 <- hotel.df[which.min(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var1),"customers required the least number of parking spaces(" ,var1,")")
perc_good <- sum(as.character(hotel.df$reserved_room_type)==as.character(hotel.df$assigned_room_type))/119390*100
cat(perc_good,"% of the people who expressed a room preference during reservation got the room during check-in.")
hist.hotel.info.h1 <- filter(hotel.df, hotel == "City Hotel")
hist.hotel.info.h2 <- filter(hotel.df, hotel == "Resort Hotel"& country!= "NULL")
hist.hotel.table.h1 <- table(hist.hotel.info.h1$country)
hist.hotel.table.h2 <- table(hist.hotel.info.h2$country)
barplot(tail(sort(hist.hotel.table.h1),n=10), main = "Top 10 Origins for Resort Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
barplot(tail(sort(hist.hotel.table.h2),n=10),main = "Top 10 Origins for City Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
#a.)
set.seed(1122)
index <- sample(1:nrow(hotel.df), size=0.1*nrow(hotel.df))
hotel.test <- hotel.df[index, ]
hotel.train <- hotel.df[-index, ]
hotel.model <- rpart(is_canceled ~ deposit_type + lead_time +country + total_of_special_requests + required_car_parking_spaces + agent +same_room , method="class", data=hotel.train)
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn", cex= .4,compress =TRUE, ycompress=TRUE,  main="Hotel Cancelation Model")
print("The varibibles I chose were deposit_type, lead_time, country, total_of_special_requests, booking_changes, market_segment, previous_cancellations, and required_car_parking_spaces")
hotel.fit <- predict(hotel.model, hotel.test, type = "class")
confusionMatrix(hotel.fit,hotel.test$is_canceled)
print("A20393813, 0.804, 0.196, 0.7833, 0.6976, 0.8689")
pruned.rocr <- predict(hotel.model, newdata=hotel.test, type="prob")[,2]
f.pred <- prediction(pruned.rocr, hotel.test$is_canceled)
plot(performance(f.pred, "tpr", "fpr"), colorize=T, lwd=3)
abline(0,1)
auc.pruned <- performance(f.pred, measure = "auc")
cat(paste("The area under curve (AUC) for the full tree is ",
round(auc.pruned@y.values[[1]], 3)))
printcp(hotel.model)
plotcp(hotel.model)
hotel.train$country = as.numeric(hotel.train$country)
hotel.train$agent = as.numeric(hotel.train$agent)
hotel.test$country = as.numeric(hotel.test$country)
hotel.test$agent = as.numeric(hotel.test$agent)
model.rf.mtry4 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=4, ntree=750, importance=TRUE, do.trace=250)
rf.predict <- predict(model.rf.mtry4, hotel.test, type="class")
hotel.train$country = as.numeric(hotel.train$country)
hotel.train$agent = as.numeric(hotel.train$agent)
hotel.test$country = as.numeric(hotel.test$country)
hotel.test$agent = as.numeric(hotel.test$agent)
model.rf.mtry4 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent + same_room, data = hotel.train, mtry=4, ntree=750, importance=TRUE, do.trace=250)
rf.predict <- predict(model.rf.mtry4, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
model.rf.mtry6 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=6, ntree=750, importance=TRUE, do.trace=250)
rf.predict <- predict(model.rf.mtry4, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
model.rf.mtry10 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=10, ntree=750, importance=TRUE, do.trace=250)
rf.predict <- predict(model.rf.mtry4, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 500,4 is the best!!!!!!!!!!!!!!!!!!!!!!!!
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 500,    mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.38%, Sensitivity of 0.9048, Specificity of 0.7703, and Balanced Accuracy of 0.8376")
# 500,4 is the best also for oob with a value of 14.60%
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 500,    mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.38%, Sensitivity of 0.9048, Specificity of 0.7703, and Balanced Accuracy of 0.8376")
# 500,4 is the best also for oob with a value of 14.60%
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent + same_room, ntree = 500, mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.38%, Sensitivity of 0.9048, Specificity of 0.7703, and Balanced Accuracy of 0.8376")
# 500,4 is the best also for oob with a value of 14.60%
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent + same_room, ntree = 750, mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.61%, Sensitivity of 0.9060, Specificity of 0.7743, and Balanced Accuracy of 0.8402")
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn",compress =TRUE, ycompress=TRUE,  main="Hotel Cancelation Model")
# 500,4 is the best!!!!!!!!!!!!!!!!!!!!!!!!
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 500,    mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.38%, Sensitivity of 0.9048, Specificity of 0.7703, and Balanced Accuracy of 0.8376")
# 500,4 is the best also for oob with a value of 14.60%
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent + same_room, ntree = 500, mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.61%, Sensitivity of 0.9060, Specificity of 0.7743, and Balanced Accuracy of 0.8402")
hotel.fit <- predict(hotel.model, hotel.test, type = "class")
library(dplyr)
library(plyr)
library(rpart)
library(caret)
library(rpart.plot)
library(ROCR)
library(randomForest)
hotel.df <- read.csv("hotel_bookings.csv", sep=",", header=T)
hotel.df$is_canceled <- as.factor(hotel.df$is_canceled)
hotel.df$same_room <- as.character(hotel.df$reserved_room_type)== as.character(hotel.df$assigned_room_type)#creating a varible that tracks if a person asked for a type of room and got the same type.
cat("Resort hotel frequency:", sum(hotel.df$hotel=="Resort Hotel"),"\nCity hotel frequency:", sum(hotel.df$hotel=="City Hotel"))
cat("Number of guests who canceled reservation:",sum(hotel.df$is_canceled==1) ,"\nNumber of guests did not cancel the reservation:",sum(hotel.df$is_canceled==0))
cust.type.df <- count(hotel.df,"customer_type")
cat("Customer type with the most reservations is Transient with", cust.type.df[which.max(cust.type.df$freq),2],"reservations")
var0 <- hotel.df[which.max(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var0),"customers required the most number of parking spaces(" ,var0,")")
var1 <- hotel.df[which.min(hotel.df$required_car_parking_spaces),"required_car_parking_spaces"]
cat(sum(hotel.df$required_car_parking_spaces == var1),"customers required the least number of parking spaces(" ,var1,")")
perc_good <- sum(as.character(hotel.df$reserved_room_type)==as.character(hotel.df$assigned_room_type))/119390*100
cat(perc_good,"% of the people who expressed a room preference during reservation got the room during check-in.")
hist.hotel.info.h1 <- filter(hotel.df, hotel == "City Hotel")
hist.hotel.info.h2 <- filter(hotel.df, hotel == "Resort Hotel"& country!= "NULL")
hist.hotel.table.h1 <- table(hist.hotel.info.h1$country)
hist.hotel.table.h2 <- table(hist.hotel.info.h2$country)
barplot(tail(sort(hist.hotel.table.h1),n=10), main = "Top 10 Origins for Resort Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
barplot(tail(sort(hist.hotel.table.h2),n=10),main = "Top 10 Origins for City Hotels",ylab = "Amount of bookings per country",col = rainbow(10))
#a.)
set.seed(1122)
index <- sample(1:nrow(hotel.df), size=0.1*nrow(hotel.df))
hotel.test <- hotel.df[index, ]
hotel.train <- hotel.df[-index, ]
hotel.model <- rpart(is_canceled ~ deposit_type + lead_time +country + total_of_special_requests + required_car_parking_spaces + agent +same_room , method="class", data=hotel.train)
rpart.plot(hotel.model, type = 4, extra = 4,branch.lty = 7, box.palette = "RdYlGn",compress =TRUE, ycompress=TRUE,  main="Hotel Cancelation Model")
print("The varibibles I chose were deposit_type, lead_time, country, total_of_special_requests, required_car_parking_spaces, + agent, and same_room")
hotel.fit <- predict(hotel.model, hotel.test, type = "class")
confusionMatrix(hotel.fit,hotel.test$is_canceled)
pruned.rocr <- predict(hotel.model, newdata=hotel.test, type="prob")[,2]
f.pred <- prediction(pruned.rocr, hotel.test$is_canceled)
plot(performance(f.pred, "tpr", "fpr"), colorize=T, lwd=3)
abline(0,1)
auc.pruned <- performance(f.pred, measure = "auc")
cat(paste("The area under curve (AUC) for the full tree is ",
round(auc.pruned@y.values[[1]], 3)))
printcp(hotel.model)
plotcp(hotel.model)
hotel.train$country = as.numeric(hotel.train$country)
hotel.train$agent = as.numeric(hotel.train$agent)
hotel.test$country = as.numeric(hotel.test$country)
hotel.test$agent = as.numeric(hotel.test$agent)
model.rf.mtry4 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent + same_room, data = hotel.train, mtry=4, ntree=750, importance=TRUE, do.trace=250)
rf.predict <- predict(model.rf.mtry4, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
model.rf.mtry6 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=6, ntree=750, importance=TRUE, do.trace=250)
rf.predict <- predict(model.rf.mtry4, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
model.rf.mtry10 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=10, ntree=750, importance=TRUE, do.trace=250)
hotel.train$country = as.numeric(hotel.train$country)
hotel.train$agent = as.numeric(hotel.train$agent)
hotel.test$country = as.numeric(hotel.test$country)
hotel.test$agent = as.numeric(hotel.test$agent)
model.rf.mtry4 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent + same_room, data = hotel.train, mtry=4, ntree=750, importance=TRUE, do.trace=250)
rf.predict <- predict(model.rf.mtry4, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
model.rf.mtry6 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=6, ntree=750, importance=TRUE, do.trace=250)
rf.predict <- predict(model.rf.mtry6, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
model.rf.mtry10 <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, data = hotel.train, mtry=10, ntree=750, importance=TRUE, do.trace=250)
rf.predict <- predict(model.rf.mtry10, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
# 500,4 is the best!!!!!!!!!!!!!!!!!!!!!!!!
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent, ntree = 500,    mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.38%, Sensitivity of 0.9048, Specificity of 0.7703, and Balanced Accuracy of 0.8376")
# 500,4 is the best also for oob with a value of 14.60%
model.rf <- randomForest(is_canceled ~ deposit_type + lead_time  + total_of_special_requests + required_car_parking_spaces + country + agent + same_room, ntree = 500, mtry = 4, data = hotel.train)
rf.predict <- predict(model.rf, hotel.test, type="class")
confusionMatrix(rf.predict, hotel.test$is_canceled)
print("The best prediction was with ntree = 500 and mtry = 4 it had an Accuracy of 85.61%, Sensitivity of 0.9060, Specificity of 0.7743, and Balanced Accuracy of 0.8402")
setwd("~/CS 422/HW3")
tr1k.df<- read.csv("tr-1k.csv", sep=",", header=T)
tr1k.df<- read.csv(file ="tr-1k.csv", sep=",", header=T)
tr1k.df<- read.csv(file ="tr-1k.csv", sep=",")
tr1k.df<- read.csv(file ="tr-1k.csv", sep=",", header=F)
tr1k.df<- read.csv(file ="tr-1k.csv", sep=",", header=F)
tr5k.df<- read.csv(file ="tr-5k.csv", sep=",", header=F)
tr20k.df<- read.csv(file ="tr-20k.csv", sep=",", header=F)
tr75.df<- read.csv(file ="tr-75k.csv", sep=",", header=F)
tr1k.df<- read.csv(file ="tr-1k.csv", sep=",", header=F)
tr5k.df<- read.csv(file ="tr-5k.csv", sep=",", header=F)
tr20k.df<- read.csv(file ="tr-20k.csv", sep=",", header=F)
tr75.df<- read.csv(file ="tr-75k.csv", sep=",", header=F)
prod.df<- read.csv(file ="products.csv", sep=",", header=F)
View(prod.df)
library(dplyr)
library(plyr)
#creating regular dataframes
prod.df<- read.csv(file ="products.csv", sep=",", header=F)
#tr1k.canon.df<- prod.df[]
prod.df[1]
prod.df[1,]
prod.df[1,2]
prod.factor[0,2]
prod.df[2,2]
prod.df[0,2]
prod.df[51,2]
prod.df[0,2]
#creating regular dataframes
tr1k.df<- read.csv(file ="tr-1k.csv", sep=",", header=F)
tr5k.df<- read.csv(file ="tr-5k.csv", sep=",", header=F)
tr20k.df<- read.csv(file ="tr-20k.csv", sep=",", header=F)
tr75.df<- read.csv(file ="tr-75k.csv", sep=",", header=F)
prod.df<- read.csv(file ="products.csv", sep=",", header=F)
tr1k.canon.df<-
tr1k.canon.df<- prod.df[2,tr1k.df$V1]
tr1k.canon.df<- prod.df[1,tr1k.df$V1]
tr1k.canon.df<- prod.df[0,tr1k.df$V1]
tr1k.df$V1
tr1k.df$V2
tr1k.canon.df<- prod.df[1,tr1k.df$V2]
tr1k.canon.df$V1<- prod.df[1,tr1k.df$V2]
tr1k.canon.df$V1<- prod.df[1,tr1k.df[0,1]]
tr1k.canon.df$V1<- prod.df[1,tr1k.df[,1]]
tr1k.canon.df$V1<- prod.df[1,tr1k.df[2,1]]
tr1k.canon.df$V1<- prod.df[1,tr1k.df[1,1]]
tr1k.canon.df<-data.frame(c(V1),c(V2),c(V3),c(V4),c(V5),c(V6),c(V7))
tr1k.canon.df<-data.frame(c("V1"),c("V2"),c("V3"),c("V4"),c("V5"),c("V6"),c("V7"))
View(tr1k.canon.df)
